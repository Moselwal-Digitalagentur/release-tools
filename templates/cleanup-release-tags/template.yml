#  Moselwal Digitalagentur Release Tools
#    Copyright (C) 2024  Moselwal Digitalagentur GmbH, Kai Ole Hartwig <support@moselwal.de>
#
#  This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.

spec:
  inputs:
    stage:
      default: 'release'
      description: "The stage in the CI/CD pipeline where this job will run.  "
    rules-config:
      description: "Configuration rules that determine when the job should run."
      type: array
      default:
        - if: $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME == "release" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_DEFAULT_BRANCH
          when: always
        - when: never
    image-config:
      description: "The Docker image to use for the job. This should use semantic versioning."
      default: "${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/alpine:3.19"
    tags-config:
      description: "Tags used to select specific runners to execute the job."
      type: array
      default: []
    additional-script-begin:
      description: "Add additional Script at the beginning of the Script."
      default: ''
    additional-script-end:
      description: "Add additional Script at the end of the Script."
      default: ''
---
release:cleanup:
  stage: $[[ inputs.stage ]]
  rules: $[[ inputs.rules-config ]]
  image: $[[ inputs.image-config | expand_vars ]]
  tags: $[[ inputs.tags-config ]]
  before_script:
    - apk add --no-cache curl jq
  script:
    - $[[ inputs.additional-script-begin ]]
    - echo "Deleting RC tags and releases using GitLab API..."
    - |
      # Fetch all tags
      TAGS=$(curl --silent --header "PRIVATE-TOKEN: $GL_TOKEN" "$CI_API_V4_URL/projects/$CI_PROJECT_ID/repository/tags" | jq -r '.[] | select(.name | test("-rc.")) | .name')
      for TAG in $TAGS; do
        echo "Deleting tag and release for: $TAG"
        # Delete the tag using the API
        curl --request DELETE --header "PRIVATE-TOKEN: $GL_TOKEN" "$CI_API_V4_URL/projects/$CI_PROJECT_ID/repository/tags/$TAG"

        # Delete the release associated with the tag using the API
        RELEASE_ID=$(curl --silent --header "JOB-TOKEN: $CI_JOB_TOKEN" "$CI_API_V4_URL/projects/$CI_PROJECT_ID/releases" | jq -r ".[] | select(.tag_name == \"$TAG\") | .id")
        if [ -n "$RELEASE_ID" ]; then
          curl --request DELETE --header "JOB-TOKEN: $CI_JOB_TOKEN" "$CI_API_V4_URL/projects/$CI_PROJECT_ID/releases/$RELEASE_ID"
        fi
      done
    - $[[ inputs.additional-script-end ]]